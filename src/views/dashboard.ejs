<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />

    <link rel="stylesheet" type="text/css" href="dashboard.css" />

    <body onload="loadData();">
      <!--Sidebar-->
      <div id="sidebar">
        <div id="welcomeMsg">
          <h1>Dashboard</h1>
          <h2>Welcome, <%=message.username %></h2>
          <button
            class="btn btn-danger"
            id="logout-conf"
            data-bs-toggle="modal"
            data-bs-target="#logoutModal"
          >
            Log Out
          </button>
        </div>
        <div id="actions">
          <button
            type="button"
            class="btn btn-info"
            data-bs-toggle="modal"
            data-bs-target="#addProdModal"
          >
            Add New Product
          </button>
          <button type="button" class="btn btn-info" id="del-itembtn">
            Delete Product
          </button>
          <label id="mCheck-label" for="main-check" style="display: none"
            >Select All</label
          >
          <input
            id="main-check"
            type="checkbox"
            class="check-input"
            style="display: none"
          />
        </div>
      </div>
      <!--Table for Items-->
      <table
        id="item-table"
        class="table table-light table-bordered table-hover"
        data-bs-click-to-select="true"
      >
        <thead class="table-dark">
          <tr>
            <th></th>
            <th scope="col">Product Name</th>
            <th scope="col">Product Inventory</th>
          </tr>
        </thead>
        <tbody id="item-body"></tbody>
      </table>
      <!--Modal for Logout-->
      <div
        class="modal fade"
        id="logoutModal"
        tabindex="-1"
        role="dialog"
        aria-labelledby="logoutModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog" role="document">
          <div class="modal-content" style="width: 50%; justify-self: center">
            <div class="modal-header">
              <h5 class="modal-title" id="logoutModalLabel">Confirm Logout</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body" style="align-items: stretch">
              <!--log-out confirm-->
              <button class="btn btn-danger" id="logout">Log Out</button>
            </div>
          </div>
        </div>
      </div>
      <!--Modal for adding products-->
      <div
        class="modal fade"
        id="addProdModal"
        tabindex="-1"
        role="dialog"
        aria-labelledby="addProdModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addProdModalLabel">
                Add new Product
              </h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <!--Form for create form-->
              <form id="addprod-form">
                <label for="addprodName">Product Name:</label>
                <input type="text" id="addprodName" required />
                <label for="addprodNumbers">Number Available:</label>
                <input type="number" id="addprodNumbers" required />
                <button type="submit" id="add-prod-btn" class="btn btn-primary">
                  Add Product
                </button>
              </form>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
      <!--Toast Message Div-->
      <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div
          id="liveToast"
          class="toast"
          role="alert"
          aria-live="assertive"
          aria-atomic="true"
          data-bs-autohide="false"
        >
          <div class="toast-header" style="align-items: flex-end">
            Notification
            <button
              type="button"
              class="close-btn btn-close"
              data-bs-dismiss="toast"
              aria-label="Close"
            ></button>
          </div>
          <div class="toast-body" id="toastbody"></div>
        </div>
      </div>
      <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"
      ></script>
      <script>
        document
          .getElementById("del-itembtn")
          .addEventListener("click", function () {
            // get element where new elements are placed
            let actionsBar = document.getElementById("actions");
            let delBut = document.getElementById("del-itembtn");
            // Add a button, Select All check, and label for checkbox
            let confDelete = document.createElement("button");
            let mainCheck = document.getElementById("main-check");
            let checkLabel = document.getElementById("mCheck-label");
            // make checkbox and label visible
            mainCheck.style.removeProperty("display");
            checkLabel.style.removeProperty("display");
            delBut.style.display = "none";
            // add appropriate attributes for button
            confDelete.setAttribute("class", "btn btn-danger");
            confDelete.setAttribute("id", "conf-del");
            confDelete.onclick = async function () {
              //
              let rows = getSelected();
              let delBut = document.getElementById("del-itembtn");
              // Add a button, Select All check, and label for checkbox
              let confDelete = document.getElementById("conf-del");
              let mainCheck = document.getElementById("main-check");
              let checkLabel = document.getElementById("mCheck-label");
              if (rows === null) {
                showToast("Error: No Entries Selected");
                return;
              }
              delBut.style.removeProperty("display");
              confDelete.style.display = "none";
              mainCheck.style.display = "none";
              checkLabel.style.display = "none";
              // delete entries
              del(rows);
            };
            //
            confDelete.appendChild(document.createTextNode("Confirm Deletion"));
            actionsBar.appendChild(confDelete);

            // set appearance prop of checkboxes to
          });

        function getSelected() {
          let table = document.querySelector("#item-table");
          let checkboxes = table.querySelectorAll('input[type="checkbox"]');
          let rows = new Array();
          checkboxes.forEach(function (cVal, index) {
            if (checkboxes[index].checked) {
              rows.push(
                checkboxes[index].parentElement.parentElement.querySelectorAll(
                  "td"
                )
              );
            }
          });
          if (rows.length === 0) return null;
          else return rows;
        }

        document.getElementById("main-check").addEventListener("change", () => {
          let stateCheck = document.querySelector("#main-check");
          let table = document.querySelector("#item-table");
          let checkboxes = table.querySelectorAll('input[type="checkbox"]');
          for (let i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].type === "checkbox") {
              checkboxes[i].checked = stateCheck.checked;
            }
          }
        });
        // load table on load
        async function loadData() {
          let token = "";
          if (window.localStorage.getItem("token")) {
            token = window.localStorage.getItem("token");
          } else if (document.cookie.token) {
            token = document.cookie.token;
          }
          const response = await fetch("/crud/product/findAll", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `${token}`,
            },
          });
          const data = await response.json();
          buildTable(data);
        }
        async function buildTable(data) {
          let table = document.getElementById("item-body");
          table.innerHTML = "";
          for (let i = 0; i < data.length; i++) {
            let row = `<tr>
                                    <th><input
                                          type="checkbox"
                                          class="check-input"
                                          name="select"
                                    /></th>
                                    <td>${data[i].name}</td>
                                    <td>${data[i].number}</td>
                            </tr>`;
            table.innerHTML += row;
          }
        }
        // Logout
        document
          .getElementById("logout")
          .addEventListener("click", async function (event) {
            event.preventDefault();
            const response = await fetch("/logout", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });
            if (response.ok) {
              window.location.href = "/";
            }
          });

        async function del(rows) {
          for (i = 0; i < rows.length; i++) {
            const data = {
              name: rows[i][0].innerHTML,
            };
            try {
              const response = await fetch("/crud/product/delDoc", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
              });
              if (!response.ok) {
                throw new Error(`Could not Delete Product ${data.name}`);
              }
              const result = await response.json();

              if (response.error) {
                throw new Error(result.error);
              }
              loadData();
            } catch (error) {
              showToast(error);
            }
          }
        }
        document
          .getElementById("addprod-form")
          .addEventListener("submit", async function (event) {
            event.preventDefault();
            const data = {
              name: document.getElementById("addprodName").value,
              number: document.getElementById("addprodNumbers").value,
            };
            try {
              const response = await fetch("/crud/product/addDoc", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(data),
              });
              const result = await response.json();
              if (!response.ok) {
                throw new Error(`Failed to add product as ${result.error}`);
              }
              loadData();
              if (result.error) {
                throw new Error(result.error);
              }
              document.getElementById("addprod-form").reset();
            } catch (error) {
              showToast(error);
            }
          });

        function showToast(message) {
          const toastElement = document.getElementById("liveToast");
          const toastBody = document.getElementById("toastbody");
          toastBody.textContent = message;
          const toast = new bootstrap.Toast(toastElement);
          toast.show();
        }
      </script>
    </body>
  </head>
</html>
